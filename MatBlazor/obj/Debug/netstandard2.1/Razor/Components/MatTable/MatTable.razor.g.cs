#pragma checksum "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c99227c661d7f7a6a8ab5ae1d9f6fbd5bfb9078b"
// <auto-generated/>
#pragma warning disable 1591
namespace MatBlazor
{
    #line hidden
    using System.Linq;
    using System.Threading.Tasks;
#nullable restore
#line 1 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
using System.Reflection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
    public partial class MatTable<TableItem> : BaseMatTable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
#nullable restore
#line 12 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
 if (!String.IsNullOrWhiteSpace(FilterByColumnName))
{

#line default
#line hidden
#nullable disable
            __Blazor.MatBlazor.MatTable.TypeInference.CreateMatTextField_0(__builder, 0, 1, "mdc-table-filter", 2, Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 14 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                      (e) => OnInput(e)

#line default
#line hidden
#nullable disable
            ), 3, 
#nullable restore
#line 14 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                                        SearchTermFieldPlaceHolder

#line default
#line hidden
#nullable disable
            , 4, 
#nullable restore
#line 14 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                                                                            SearchTermFieldLabel

#line default
#line hidden
#nullable disable
            , 5, 
#nullable restore
#line 14 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                                                                                                          SearchTerm

#line default
#line hidden
#nullable disable
            , 6, "filter_list");
#nullable restore
#line 15 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
}

#line default
#line hidden
#nullable disable
            __Blazor.MatBlazor.MatTable.TypeInference.CreateCascadingValue_1(__builder, 7, 8, 
#nullable restore
#line 16 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                        this

#line default
#line hidden
#nullable disable
            , 9, (__builder2) => {
                __builder2.OpenElement(10, "table");
                __builder2.AddAttribute(11, "class", 
#nullable restore
#line 17 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                   ClassMapper.AsString()

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(12, "style", 
#nullable restore
#line 17 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                   StyleMapper.AsString()

#line default
#line hidden
#nullable disable
                );
                __builder2.AddMultipleAttributes(13, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, object>>>(
#nullable restore
#line 17 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                                                   Attributes

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(14, "Id", 
#nullable restore
#line 17 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                                                                    Id

#line default
#line hidden
#nullable disable
                );
                __builder2.AddElementReferenceCapture(15, (__value) => {
#nullable restore
#line 17 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                                 Ref = __value;

#line default
#line hidden
#nullable disable
                }
                );
                __builder2.OpenElement(16, "thead");
#nullable restore
#line 19 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
             if (UseSortHeaderRow)
            {
                

#line default
#line hidden
#nullable disable
                __builder2.AddContent(17, 
#nullable restore
#line 21 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                 MatTableHeader

#line default
#line hidden
#nullable disable
                );
#nullable restore
#line 21 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                               
            }
            else
            {

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(18, "tr");
                __builder2.AddAttribute(19, "class", "mdc-table-header-row" + " " + (
#nullable restore
#line 25 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                  HeaderRowClass

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddContent(20, 
#nullable restore
#line 25 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                    MatTableHeader

#line default
#line hidden
#nullable disable
                );
                __builder2.CloseElement();
#nullable restore
#line 26 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
            }

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(21, "\n        ");
                __builder2.OpenElement(22, "tbody");
#nullable restore
#line 29 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
             if (ItemList != null)
            {
                

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                 foreach (var item in ItemList)
                {

#line default
#line hidden
#nullable disable
                __builder2.OpenComponent<MatBlazor.TableRow>(23);
                __builder2.AddAttribute(24, "Class", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.String>(
#nullable restore
#line 33 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                      RowClass

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(25, "AllowSelection", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 35 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                               AllowSelection

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(26, "ondblclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 36 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                           () => OnRowDbClickHandler(item)

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(27, "RowItem", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Object>(
#nullable restore
#line 37 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                       item

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(28, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddContent(29, 
#nullable restore
#line 38 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                         MatTableRow(item)

#line default
#line hidden
#nullable disable
                    );
                }
                ));
                __builder2.SetKey(
#nullable restore
#line 34 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                    item

#line default
#line hidden
#nullable disable
                );
                __builder2.CloseComponent();
#nullable restore
#line 40 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                }

#line default
#line hidden
#nullable disable
#nullable restore
#line 40 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                 
            }

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 43 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
         if (@ShowFooter)
        {

#line default
#line hidden
#nullable disable
                __builder2.AddMarkupContent(30, "<tfoot class=\"mdc-table-footer-row\"></tfoot>");
#nullable restore
#line 46 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
        }

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
            }
            );
#nullable restore
#line 50 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
 if (@ShowPaging)
{

#line default
#line hidden
#nullable disable
            __builder.OpenElement(31, "div");
            __builder.AddAttribute(32, "class", "mdc-paginator");
            __builder.OpenElement(33, "div");
            __builder.AddAttribute(34, "class", "mdc-paginator-container");
            __builder.OpenElement(35, "div");
            __builder.AddAttribute(36, "class", "mdc-paginator-page-size");
            __builder.AddContent(37, 
#nullable restore
#line 55 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                 PageRecordCountLabel

#line default
#line hidden
#nullable disable
            );
            __builder.AddMarkupContent(38, "\n                ");
            __Blazor.MatBlazor.MatTable.TypeInference.CreateMatSelect_2(__builder, 39, 40, 
#nullable restore
#line 56 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                         PageSizeStr

#line default
#line hidden
#nullable disable
            , 41, Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => PageSizeStr = __value, PageSizeStr)), 42, () => PageSizeStr, 43, (__builder2) => {
#nullable restore
#line 57 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                     if (PageSizes != null)
                        {
                            foreach (var item in PageSizes)
                            {

#line default
#line hidden
#nullable disable
                __Blazor.MatBlazor.MatTable.TypeInference.CreateMatOption_3(__builder2, 44, 45, 
#nullable restore
#line 61 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                               item.Value.ToString()

#line default
#line hidden
#nullable disable
                , 46, (__builder3) => {
                    __builder3.AddContent(47, 
#nullable restore
#line 61 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                       item.Text

#line default
#line hidden
#nullable disable
                    );
                }
                );
#nullable restore
#line 62 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                            }
                        }

#line default
#line hidden
#nullable disable
            }
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(48, "\n\n            ");
            __builder.OpenElement(49, "div");
            __builder.AddAttribute(50, "class", "mdc-paginator-range-actions");
            __builder.OpenElement(51, "span");
            __builder.AddAttribute(52, "class", "mdc-paginator-range-label");
            __builder.AddContent(53, 
#nullable restore
#line 68 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                         PageLabel

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(54, " ");
            __builder.AddContent(55, 
#nullable restore
#line 68 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                    CurrentPage

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(56, " / ");
            __builder.AddContent(57, 
#nullable restore
#line 68 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                                   TotalPages

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(58, "\n                ");
            __builder.OpenElement(59, "div");
            __builder.AddAttribute(60, "class", "mdc-paginator-range-buttons");
            __builder.OpenComponent<MatBlazor.MatIconButton>(61);
            __builder.AddAttribute(62, "Icon", "first_page");
            __builder.AddAttribute(63, "OnClick", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 70 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                               async () => NavigateToPage(PageDirection.First)

#line default
#line hidden
#nullable disable
            )));
            __builder.AddAttribute(64, "Disabled", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 70 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                                                                           CurrentPage <= 1

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseComponent();
            __builder.AddMarkupContent(65, "\n                    ");
            __builder.OpenComponent<MatBlazor.MatIconButton>(66);
            __builder.AddAttribute(67, "Icon", "navigate_before");
            __builder.AddAttribute(68, "OnClick", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 71 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                    async () => NavigateToPage(PageDirection.Previous)

#line default
#line hidden
#nullable disable
            )));
            __builder.AddAttribute(69, "Disabled", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 71 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                                                                                   CurrentPage <= 1

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseComponent();
            __builder.AddMarkupContent(70, "\n                    ");
            __builder.OpenComponent<MatBlazor.MatIconButton>(71);
            __builder.AddAttribute(72, "Icon", "navigate_next");
            __builder.AddAttribute(73, "OnClick", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 79 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                   async () => NavigateToPage(PageDirection.Next)

#line default
#line hidden
#nullable disable
            )));
            __builder.AddAttribute(74, "Disabled", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 79 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                                                                                CurrentPage == EndPage

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseComponent();
            __builder.AddMarkupContent(75, "\n                    ");
            __builder.OpenComponent<MatBlazor.MatIconButton>(76);
            __builder.AddAttribute(77, "Icon", "last_page");
            __builder.AddAttribute(78, "OnClick", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 80 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                              async () => NavigateToPage(PageDirection.Last)

#line default
#line hidden
#nullable disable
            )));
            __builder.AddAttribute(79, "Disabled", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 80 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
                                                                                                                         CurrentPage == EndPage

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseComponent();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
#nullable restore
#line 85 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
}

#line default
#line hidden
#nullable disable
        }
        #pragma warning restore 1998
#nullable restore
#line 87 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor\Components\MatTable\MatTable.razor"
      

    protected string PageSizeStr
    {
        get => PageSize.ToString();
        set
        {
            PageSize = Convert.ToInt32(value);
            CurrentPage = 1;
            TotalPages = Math.Max(1, (int)Math.Ceiling(Items.Count() / (decimal)PageSize));
            EndPage = TotalPages;
            StartPage = 1;
            SetPageSize(PageDirection.Next);
            UpdateList(1).GetAwaiter();
        }
    }

    [Parameter]
    public RenderFragment MatTableHeader { get; set; }

    [Parameter]
    public bool UseSortHeaderRow { get; set; } = false;

    [Parameter]
    public RenderFragment<TableItem> MatTableRow { get; set; }

    /// <summary>
    /// Not Functioning
    /// </summary>
    [Parameter]
    public PageSizeStructure[] PageSizes { get; set; }

    /// <summary>
    /// Specifies the data for the table.
    /// </summary>
    [Parameter]
    public IEnumerable<TableItem> Items { get; set; }

    protected IEnumerable<TableItem> ItemList { get; set; }

    private string[] FilteredColumns => FilterByColumnName?.Split(";") ?? Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        var tempPlaceholder = string.Join(", ", FilteredColumns);

        var lastComma = tempPlaceholder.LastIndexOf(",");

        if (lastComma != -1)
        {
            SearchTermFieldPlaceHolder = tempPlaceholder.Remove(lastComma, 1).Insert(lastComma, " and");
        }

        if (DebounceMilliseconds <= 0)
        {
            DebounceMilliseconds = 800;
        }
        if (PageSizes == null)
        {
            PageSizes = new PageSizeStructure[]
            {
                new PageSizeStructure() {Text = "5", Value = 5},
                new PageSizeStructure() {Text = "10", Value = 10},
                new PageSizeStructure() {Text = "25", Value = 25},
                new PageSizeStructure() {Text = "50", Value = 50},
                new PageSizeStructure() {Text = "100", Value = 100},
                new PageSizeStructure() {Text = "*", Value = -1}
                                                        };
            if (PageSize <= 0)
                PageSize = 5;
        }
        
        StartPage = 1;
        CurrentPage = StartPage;

        if (!string.IsNullOrWhiteSpace(ApiUrl) && (RequestApiOnlyOnce || LoadInitialData))
        {
            try
            {
                if (!string.IsNullOrWhiteSpace(PagingDataPropertyName) &&
                    !string.IsNullOrWhiteSpace(PagingRecordsCountPropertyName))
                {
                    await SearchPagedData();
                }
                else
                {
                    await SearchData();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error OnInitialized: " + ex.Message);
                ErrorMessage = ex.Message;
            }
        }
        else if (Items != null && Items.Count() > 0)
        {
            FilterLocalProvidedData();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    async Task UpdateList(int currentPage)
    {
        ItemList = Items.Skip((currentPage - 1) * PageSize).Take(PageSize);
        CurrentPage = currentPage;
        this.StateHasChanged();
        await LoadData();
    }

    async Task OnPageSizeChange(ChangeEventArgs eventArgs)
    {
        PageSize = Convert.ToInt32(eventArgs.Value?.ToString());
        CurrentPage = 1;
        await LoadData();
    }

    async Task LoadData()
    {
        try
        {
            if (RequestApiOnlyOnce)
            {
                FilterData();
            }
            else if (!string.IsNullOrWhiteSpace(ApiUrl) &&
                     !string.IsNullOrWhiteSpace(PagingDataPropertyName) &&
                     !string.IsNullOrWhiteSpace(PagingRecordsCountPropertyName))
            {
                await SearchPagedData();
            }
            else if (!string.IsNullOrWhiteSpace(ApiUrl) &&
                     (string.IsNullOrWhiteSpace(PagingDataPropertyName) ||
                      string.IsNullOrWhiteSpace(PagingRecordsCountPropertyName)))
            {
                await SearchData();
            }
            else
            {
                FilterData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error LoadData: " + ex.Message);
            ErrorMessage = ex.Message;
        }
        await base.InvokeAsync(StateHasChanged);
    }

    async Task SearchData()
    {
        try
        {
            Items = await Http.GetJsonAsync<TableItem[]>(ApiUrl + SearchTermParam(SearchTerm));
            ItemList = Items.Skip(RecordsFrom).Take(PageSize);
            RecordsCount = Items.Count();
            TotalPages = Math.Max(1, (int)Math.Ceiling(Items.Count() / (decimal)PageSize));
            EndPage = TotalPages;
            RecordsFrom = (CurrentPage - 1) * PageSize;
            RecordsTo = RecordsFrom + PageSize;
            SetPageSize(PageDirection.Next);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error SearchData: " + ex.Message);
            ErrorMessage = ex.Message;
        }
    }

    void FilterLocalProvidedData()
    {
        RecordsFrom = (CurrentPage - 1) * PageSize;
        RecordsTo = RecordsFrom + PageSize;
        ItemList = Items.Skip(RecordsFrom).Take(PageSize);
        TotalPages = Math.Max(1, (int)Math.Ceiling(Items.Count() / (decimal)PageSize));
        EndPage = TotalPages;
        SetPageSize(PageDirection.Next);
    }

    async Task SearchPagedData()
    {
        var PagedData = await Http.GetStringAsync(ApiUrl + SearchTermParam(SearchTerm));
        var doc = JsonDocument.Parse(PagedData);
        var root = doc.RootElement;
        var itemsString = root.GetProperty(PagingDataPropertyName).GetRawText();
        
        var opt = new JsonSerializerOptions()
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };
        
        var items = JsonSerializer.Deserialize<List<TableItem>>(itemsString, opt);
        
        Items = items;
        var Count = root.GetProperty(PagingRecordsCountPropertyName).GetInt32();
        RecordsFrom = (CurrentPage - 1) * PageSize;
        RecordsTo = (RecordsFrom + PageSize < Count) ? RecordsFrom + PageSize : Count;
        ItemList = Items;
        TotalPages = Math.Max(1, (int)Math.Ceiling(Count / (decimal)PageSize));
        EndPage = TotalPages;
        SetPageSize(PageDirection.First);
    }

    void FilterData()
    {
        try
        {
            RecordsFrom = (CurrentPage - 1) * PageSize;

            if (!string.IsNullOrWhiteSpace(SearchTerm))
            {
                if (string.IsNullOrWhiteSpace(FilterByColumnName))
                {
                    throw new ArgumentNullException("FilterByColumnName param cannot be null");
                }

                var properties = typeof(TableItem).GetProperties(BindingFlags.Public | BindingFlags.Instance);

                if (properties == null)
                {
                    throw new NullReferenceException("Could not get properties.");
                }

                var propertyNames = properties.Select(x => x.Name);

                var containsAllColumns = propertyNames.Intersect(FilteredColumns).Count() == FilteredColumns.Length;

                if (!containsAllColumns)
                {
                    throw new NotSupportedException("One or more columns don't exist in the current context");
                }

                var relevantProperties = properties.Where(x => FilteredColumns.Contains(x.Name)).ToArray();

                var filteredCollection = AddToFilteredCollection(Items, relevantProperties);

                RecordsFilteredCount = filteredCollection.Count;
                RecordsTo = (RecordsFrom + PageSize < RecordsFilteredCount) ? RecordsFrom + PageSize : RecordsFilteredCount;
                TotalPages = Math.Max(1, (int)Math.Ceiling(RecordsFilteredCount / (decimal)PageSize));
                EndPage = TotalPages;

                if (PageSize <= 0)
                {
                    ItemList = filteredCollection;
                }
                else
                {
                    ItemList = filteredCollection.Skip(RecordsFrom).Take(PageSize);
                }
            }
            else
            {
                if (PageSize <= 0)
                {
                    ItemList = Items;
                }
                else
                {
                    ItemList = Items.Skip(RecordsFrom).Take(PageSize);
                }
                RecordsTo = (RecordsFrom + PageSize < Items.Count()) ? RecordsFrom + PageSize : Items.Count();
                TotalPages = Math.Max(1, (int)Math.Ceiling(Items.Count() / (decimal)PageSize));
                EndPage = TotalPages;
            }
            SetPageSize(PageDirection.Next);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error LoadData: " + ex.Message);
            ErrorMessage = ex.Message;
        }
    }

    public void SetPageSize(PageDirection direction)
    {
        if ((direction == PageDirection.Next || direction == PageDirection.Last) && (EndPage < TotalPages))
        {
            StartPage = EndPage + 1;
            if (EndPage + PageSize < TotalPages)
            {
                EndPage = StartPage + PageSize - 1;
            }
            else
            {
                EndPage = TotalPages;
            }
            this.StateHasChanged();
        }
        else if ((direction == PageDirection.Previous || direction == PageDirection.First) && (StartPage > 1))
        {
            EndPage = StartPage - 1;
            StartPage = StartPage - PageSize;
        }
    }

    async Task NavigateToPage(PageDirection direction)
    {
        switch (direction)
        {
            case (PageDirection.First):
                CurrentPage = StartPage;
                break;
            case (PageDirection.Last):
                CurrentPage = EndPage;
                break;
            case (PageDirection.Next):
                if ((CurrentPage < TotalPages) && (CurrentPage == EndPage))
                {
                    SetPageSize(PageDirection.Next);
                }
                CurrentPage++;
                break;
            case (PageDirection.Previous):
                if ((CurrentPage > 1) && (CurrentPage == StartPage))
                {
                    SetPageSize(PageDirection.Previous);
                }
                CurrentPage--;
                break;
        }

        // C# 8.0 Code
        //CurrentPage = (direction) switch
        //{
        //    PageDirection.First => StartPage,
        //    PageDirection.Last => EndPage,
        //    PageDirection.Next => ((Func<int>)(() =>
        //    {
        //        if ((CurrentPage < TotalPages) && (CurrentPage == EndPage))
        //        {
        //            SetPageSize(PageDirection.Next);
        //        }
        //        return CurrentPage + 1;
        //    }))(),
        //    PageDirection.Previous => ((Func<int>)(() =>
        //    {
        //        if ((CurrentPage > 1) && (CurrentPage == StartPage))
        //        {
        //            SetPageSize(PageDirection.Previous);
        //        }
        //        return CurrentPage - 1;
        //    }))(),
        //    _ => throw new NotSupportedException()
        //};

        await UpdateList(CurrentPage);
    }

    void OnInput(ChangeEventArgs eventArgs)
    {
        Debounce(eventArgs, DebounceMilliseconds, async (e) =>
        {
            SearchTerm = ((ChangeEventArgs)e).Value?.ToString();
            CurrentPage = 1;
            await LoadData();
        });
    }

    List<TableItem> AddToFilteredCollection(IEnumerable<TableItem> items, PropertyInfo[] properties)
    {
        var filteredCollection = new List<TableItem>();

        foreach (var item in items)
        {
            var values = properties.Where(x => x.GetValue(item, null)?.ToString() != null).Select(x => x.GetValue(item, null).ToString());

            if (!values.Any())
            {
                continue;
            }

            if (values.Any(x => x.ToLower().Contains(SearchTerm.ToLower())))
            {
                filteredCollection.Add(item);
            }
        }

        return filteredCollection;
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private System.Net.Http.HttpClient Http { get; set; }
    }
}
namespace __Blazor.MatBlazor.MatTable
{
    #line hidden
    internal static class TypeInference
    {
        public static void CreateMatTextField_0<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, System.Object __arg0, int __seq1, global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs> __arg1, int __seq2, System.Object __arg2, int __seq3, global::System.String __arg3, int __seq4, TValue __arg4, int __seq5, global::System.String __arg5)
        {
        __builder.OpenComponent<global::MatBlazor.MatTextField<TValue>>(seq);
        __builder.AddAttribute(__seq0, "class", __arg0);
        __builder.AddAttribute(__seq1, "OnInput", __arg1);
        __builder.AddAttribute(__seq2, "Placeholder", __arg2);
        __builder.AddAttribute(__seq3, "Label", __arg3);
        __builder.AddAttribute(__seq4, "Value", __arg4);
        __builder.AddAttribute(__seq5, "Icon", __arg5);
        __builder.CloseComponent();
        }
        public static void CreateCascadingValue_1<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, global::Microsoft.AspNetCore.Components.RenderFragment __arg1)
        {
        __builder.OpenComponent<global::Microsoft.AspNetCore.Components.CascadingValue<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Value", __arg0);
        __builder.AddAttribute(__seq1, "ChildContent", __arg1);
        __builder.CloseComponent();
        }
        public static void CreateMatSelect_2<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg1, int __seq2, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg2, int __seq3, global::Microsoft.AspNetCore.Components.RenderFragment __arg3)
        {
        __builder.OpenComponent<global::MatBlazor.MatSelect<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Value", __arg0);
        __builder.AddAttribute(__seq1, "ValueChanged", __arg1);
        __builder.AddAttribute(__seq2, "ValueExpression", __arg2);
        __builder.AddAttribute(__seq3, "ChildContent", __arg3);
        __builder.CloseComponent();
        }
        public static void CreateMatOption_3<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, global::Microsoft.AspNetCore.Components.RenderFragment __arg1)
        {
        __builder.OpenComponent<global::MatBlazor.MatOption<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Value", __arg0);
        __builder.AddAttribute(__seq1, "ChildContent", __arg1);
        __builder.CloseComponent();
        }
    }
}
#pragma warning restore 1591
