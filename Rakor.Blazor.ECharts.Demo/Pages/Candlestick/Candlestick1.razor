@page "/k/k1"
@using Rakor.Blazor.ECharts.Option
@using Rakor.Blazor.ECharts
@using Rakor.Blazor.ECharts.Option.Enum
@using Rakor.Blazor.ECharts.Option.Series.Candlestick
@using Rakor.Blazor.ECharts.Option.Series.Line
@using Rakor.Blazor.ECharts.Option.Series.Bar
@using Rakor.Blazor.ECharts.Option.Series

@inject HttpClient HttpClient
@inject MessageService Message

<div class="container">
    <BForm Inline="true" @ref="demoForm" Style="margin-top:10px" Value="value">
        <BFormItem TValue="string" Label="股票代码" Name="@nameof(KDemoFormModel.Code)" IsRequired="true">
            <BInput TValue="string" Style="width:100px"></BInput>
        </BFormItem>
        <BFormItem TValue="DateTime?" Label="起始日期" Name="@nameof(KDemoFormModel.StartTime)">
            <BDatePicker IsClearable="true" Style="width:150px"></BDatePicker>
        </BFormItem>
        <BFormItem TValue="DateTime?" Label="结束日期" Name="@nameof(KDemoFormModel.EndTime)">
            <BDatePicker IsClearable="true" Style="width:150px"></BDatePicker>
        </BFormItem>
        <BFormItem TValue="object">
            <BButton Type="@ButtonType.Primary" OnClick="e=>Submit()">查询</BButton>
            <BButton OnClick="e=>Reset()">重置</BButton>
        </BFormItem>
    </BForm>
    <ECandlestick Option="@Option1" Class="chart-fill" AutoRender="false" @ref="k"></ECandlestick>
</div>

@code{
    private EChartsOption<object> Option1;
    private ECandlestick k;

    private void ShowData(string code, DateTime? start, DateTime? end)
    {
        if (code.StartsWith("6")) code = "sh." + code;
        else code = "sz." + code;
        if (start == null && end == null)
        {
            end = yesterday;
            start = yesterday.AddYears(-1);
        }
        else if (start == null)
        {
            start = end.Value.AddYears(-1);
        }
        else if (end == null)
        {
            end = start.Value.AddYears(1);
        }
        else
        {
            if (end.Value.Subtract(start.Value).TotalDays > 365)
            {
                Message.Show("时间跨度不能大于一年", MessageType.Error);
                return;
            }
        }
        string ip = "172.19.54.106";
#if DEBUG
        ip = "101.132.118.176";
#endif
        var info=Newtonsoft.Json.JsonConvert.DeserializeObject<List<StockInfo>>(HttpClient.GetStringAsync($"http://{ip}:8124/api/info/{code}").Result).FirstOrDefault();
        if (info == null)
        {
            Message.Show("未获取到股票信息，请确认代码是否正确。", MessageType.Error);
            return;
        }
        if (info.Type != 1)
        {
            Message.Show($"该代码所代表的【{info.Name}】不是股票。", MessageType.Error);
            return;
        }
        _=k.ShowLoadingAsync();
        var result = HttpClient.GetStringAsync($"http://{ip}:8124/api/kdata/{code}/{start.Value.ToString("yyyy-MM-dd")}/{end.Value.ToString("yyyy-MM-dd")}").Result;
        var stock = Newtonsoft.Json.JsonConvert.DeserializeObject<List<StockData>>(result);
        var category = stock.Select(item => item.Date);
        var values = stock.Select(item => new[] { item.Open, item.Close, item.Low, item.High, item.Amount });
        var values1 = values.ToList();
        var liTTM=stock.Select(item => item.PeTTM);
        var volumes = stock.Select((item, index) => new[] { index, item.Amount, item.Close >= item.Open ? 1 : -1 });
        string upColor = "#ec0000", downColor = "#00da3c";

        Option1 = new EChartsOption<object>()
        {
            Title = new Title() { Text = $"【{info.Name}】K线图" },
            BackgroundColor = "#fff",
            Animation = false,
            Legend = new Legend()
            {
                Left = "center",
                Data = new[] { "股价信息", "MA5", "MA10", "MA20", "MA30" }
            },
            Tooltip = new Tooltip()
            {
                Trigger = TooltipTrigger.Axis,
                AxisPointer = new TooltipAxisPointer() { Type = AxisPointerType.Cross },
                BackgroundColor = "rgba(245, 245, 245, 0.8)",
                BorderWidth = 1,
                BorderColor = "#ccc",
                Padding = 10,
                TextStyle = new TextStyle() { Color = "#000" },
                Position = "function (pos, params, el, elRect, size) {var obj = {top: 10};obj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 30;return obj;}".ToJRaw()
            },
            AxisPointer = new AxisPointer()
            {
                Link = new AxisPointerLink() { XAxisIndex = "all" },
                Label = new AxisPointerLabel() { BackgroundColor = "#777" }
            },
            Toolbox = new Toolbox()
            {
                Feature = new Feature()
                {
                    DataZoom = new FeatureDataZoom() { YAxisIndex = false },
                    Brush = new FeatureBrush() { Type = new List<BrushType>() { BrushType.LineX, BrushType.Clear } }
                }
            },
            Brush = new Brush()
            {
                XAxisIndex = "all",
                BrushLink = "all",
                OutOfBrush = new { colorAlpha = 0.1 }
            },
            VisualMap = new VisualMapPiecewise()
            {
                Show = false,
                SeriesIndex = 5,
                Dimension = 2,
                Pieces = new List<object>()
    {
                    new {value=1,color= upColor},
                    new {value=-1,color=downColor }
                }
            },
            Grid = new List<Grid>()
{
                new Grid(){Left="10%",Right="8%",Height="50%" },
                new Grid(){Left="10%",Right="8%",Top="60%",Height="20%" },
                new Grid(){Left="10%",Right="8%",Top="80%",Height="15%" }
            },
            XAxis = new List<XAxis>()
{
                new XAxis()
                {
                    Type=AxisType.Category,
                    Data=category,
                    Scale=true,
                    BoundaryGap=false,
                    AxisLine=new AxisLine(){ OnZero=false},
                    SplitLine=new SplitLine(){ Show=false},
                    SplitNumber=20,
                    Min="dataMin",
                    Max="dataMax",
                    AxisPointer=new AxisPointer(){Z=100 }
                },
                new XAxis()
                {
                    Type=AxisType.Category,
                    GridIndex=1,
                    Data=category,
                    Scale=true,
                    BoundaryGap=false,
                    AxisLine=new AxisLine(){ OnZero=false},
                    AxisTick=new AxisTick(){Show=false },
                    SplitLine=new SplitLine(){ Show=false},
                    AxisLabel=new AxisLabel(){ Show=false},
                    SplitNumber=20,
                    Min="dataMin",
                    Max="dataMax"
                },
                new XAxis()
                {
                    Type=AxisType.Category,
                    GridIndex=2,
                    Data=category,
                    Scale=true,
                    BoundaryGap=false,
                    AxisLine=new AxisLine(){ OnZero=false},
                    AxisTick=new AxisTick(){Show=false },
                    SplitLine=new SplitLine(){ Show=false},
                    AxisLabel=new AxisLabel(){ Show=false},
                    SplitNumber=20,
                    Min="dataMin",
                    Max="dataMax"
                }
            },
            YAxis = new List<YAxis>()
{
                new YAxis()
                {
                    Scale=true,
                    SplitArea=new SplitArea(){ Show=true}
                },
                new YAxis()
                {
                    Scale=true,
                    GridIndex=1,
                    SplitNumber=2,
                    AxisLabel=new AxisLabel(){ Show=false},
                    AxisLine=new AxisLine(){ Show=false},
                    AxisTick=new AxisTick(){ Show=false},
                    SplitLine=new SplitLine(){ Show=false},
                },
                new YAxis()
                {
                    Scale=true,
                    GridIndex=2,
                    SplitNumber=2,
                    AxisLabel=new AxisLabel(){ Show=false},
                    AxisLine=new AxisLine(){ Show=false},
                    AxisTick=new AxisTick(){ Show=false},
                    SplitLine=new SplitLine(){ Show=false},
                }
            },
            DataZoom = new List<object>()
{
                new DataZoomInside()
                {
                    XAxisIndex=new []{0,1,2 },
                    Start=70,
                    End=100
                },
                new DataZoomSlider()
                {
                    Show=true,
                    XAxisIndex=new []{0,1,2 },
                    Top="95%",
                    Start=70,
                    End=100
                }
            },
            Series = new List<object>()
    {
                new Candlestick()
                {
                    Name="股价信息",
                    Data=values,
                    ItemStyle=new ItemStyle(){Color=upColor,Color0=downColor,BorderColor="null".ToJRaw(),BorderColor0="null".ToJRaw() },
                    //Tooltip=new Tooltip()
                    //{
                    //    Formatter="function (param) {param = param[0];return ['Date: ' + param.name + '<hr size=1 style=\"margin: 3px 0\">','开盘价: ' + param.data[0] + '<br/>','收盘价: ' + param.data[1] + '<br/>','最低价: ' + param.data[2] + '<br/>','最高价: ' + param.data[3] + '<br/>'].join('');}".ToJRaw()
                    //}
                },
                new Line()
                {
                    Name="MA5",
                    Data=CalculateMA(5,values1),
                    Smooth=true,
                    LineStyle=new LineStyle(){Opacity=0.5 }
                },
                new Line()
                {
                    Name="MA10",
                    Data=CalculateMA(10,values1),
                    Smooth=true,
                    LineStyle=new LineStyle(){Opacity=0.5 }
                },
                new Line()
                {
                    Name="MA20",
                    Data=CalculateMA(20,values1),
                    Smooth=true,
                    LineStyle=new LineStyle(){Opacity=0.5 }
                },
                new Line()
                {
                    Name="MA30",
                    Data=CalculateMA(30,values1),
                    Smooth=true,
                    LineStyle=new LineStyle(){Opacity=0.5 }
                },
                new Bar()
                {
                    Name="成交额",
                    XAxisIndex=1,
                    YAxisIndex=1,
                    Data=volumes
                },
                new Line()
                {
                    Name="滚动市盈率",
                    Data=liTTM,
                    XAxisIndex=2,
                    YAxisIndex=2,
                    Smooth=true,
                    LineStyle=new LineStyle(){Opacity=0.5,Color="blue" }
                }
            }
        };

        _ = k.SetupOptionAsync(Option1, true);
        while (end.Value.DayOfWeek == DayOfWeek.Sunday || end.Value.DayOfWeek == DayOfWeek.Saturday)
        {
            end=end.Value.AddDays(-1);
        }
        DateTime t = end.Value.AddMonths(-1);
        while (t.DayOfWeek == DayOfWeek.Sunday || t.DayOfWeek == DayOfWeek.Saturday)
        {
            t=t.AddDays(1);
        }
        _ = k.ExecFuncAsync($"dispatchAction({{type: 'brush',areas: [{{brushType: 'lineX',coordRange: ['{t.ToString("yyyy-MM-dd")}', '{end.Value.ToString("yyyy-MM-dd")}'],xAxisIndex: 0}}]}});");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (IsFirst) Submit();
        IsFirst = false;
    }

    private List<object> CalculateMA(int day, List<double[]> data)
    {
        List<object> list = new List<object>();
        for (int i = 0, count = data.Count(); i < count; i++)
        {
            if (i < day)
            {
                list.Add("-");
                continue;
            }
            double sum = 0;
            for (int j = 0; j < day; j++)
            {
                sum += data[i - j][1];
            }
            list.Add(Math.Round(sum / day, 3));
        }
        return list;
    }

    protected BForm demoForm;
    private bool IsFirst = true;
    internal KDemoFormModel value;
    DateTime yesterday = DateTime.Now.AddDays(-1);
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        value = new KDemoFormModel()
        {
            Code = "002024",
            StartTime = yesterday.AddYears(-1),
            EndTime = yesterday
        };
    }
    protected void Submit()
    {
        if (!demoForm.IsValid())
        {
            return;
        }
        var model = demoForm.GetValue<KDemoFormModel>();
        ShowData(model.Code, model.StartTime, model.EndTime);
    }
    protected void Reset()
    {
        demoForm.Reset();
        Submit();
    }
    public class KDemoFormModel
    {
        public string Code { set; get; }
        public DateTime? StartTime { set; get; }
        public DateTime? EndTime { set; get; }
    }
}