#pragma checksum "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3742dce2c1d37bcea7a1bd2dbb25662fcccb0d36"
// <auto-generated/>
#pragma warning disable 1591
namespace MatBlazor.Demo.Demo
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.BlazorFiddle;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.Demo;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.DemoContainer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.Doc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.Frames;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
using System.Diagnostics;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    public partial class DemoFileUpload : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.OpenComponent<MatBlazor.Demo.Doc.DocMatFileUpload>(0);
            __builder.CloseComponent();
            __builder.AddMarkupContent(1, "\n\n");
            __builder.AddMarkupContent(2, "<h5 class=\"mat-h5\">Single File Example</h5>\n");
            __builder.OpenComponent<MatBlazor.Demo.DemoContainer.DemoContainer>(3);
            __builder.AddAttribute(4, "Content", (Microsoft.AspNetCore.Components.RenderFragment)((__builder2) => {
                __builder2.OpenComponent<MatBlazor.MatFileUpload>(5);
                __builder2.AddAttribute(6, "OnChange", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<MatBlazor.IMatFileUploadEntry[]>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<MatBlazor.IMatFileUploadEntry[]>(this, 
#nullable restore
#line 9 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
                                  FilesReady

#line default
#line hidden
#nullable disable
                )));
                __builder2.AddAttribute(7, "Label", "Drop a single file here or Browse");
                __builder2.CloseComponent();
#nullable restore
#line 11 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
         foreach (var f in list)
        {

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(8, "div");
                __builder2.AddContent(9, 
#nullable restore
#line 13 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
                  f

#line default
#line hidden
#nullable disable
                );
                __builder2.CloseElement();
#nullable restore
#line 14 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
        }

#line default
#line hidden
#nullable disable
            }
            ));
            __builder.AddAttribute(10, "SourceContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder2) => {
                __builder2.OpenComponent<MatBlazor.Demo.BlazorFiddle.BlazorFiddle>(11);
                __builder2.AddAttribute(12, "Template", "MatBlazor");
                __builder2.AddAttribute(13, "Code", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.String>(
#nullable restore
#line 31 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
                                                  @"
        <MatFileUpload OnChange=""@FilesReady"" Label=""Drop a single file here or Browse""></MatFileUpload>

        @foreach (var f in list)
        {
            <div>@f</div>
        }

        @code
        {
            List<string> list = new List<string>();

            void FilesReady(IMatFileUploadEntry[] files)
            {
                foreach (var file in files)
                {
                    list.Add($""Name: {file.Name} - Size: {file.Size}"");
                }
            }
        }

    "

#line default
#line hidden
#nullable disable
                ));
                __builder2.CloseComponent();
            }
            ));
            __builder.CloseComponent();
            __builder.AddMarkupContent(14, "\n\n\n\n");
            __builder.AddMarkupContent(15, "<h5 class=\"mat-h5\">Multiple Files Example</h5>\n");
            __builder.OpenComponent<MatBlazor.Demo.DemoContainer.DemoContainer>(16);
            __builder.AddAttribute(17, "Content", (Microsoft.AspNetCore.Components.RenderFragment)((__builder2) => {
                __builder2.OpenComponent<MatBlazor.MatFileUpload>(18);
                __builder2.AddAttribute(19, "OnChange", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<MatBlazor.IMatFileUploadEntry[]>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<MatBlazor.IMatFileUploadEntry[]>(this, 
#nullable restore
#line 61 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
                                  MultipleFilesReady

#line default
#line hidden
#nullable disable
                )));
                __builder2.AddAttribute(20, "AllowMultiple", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 61 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
                                                                     true

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(21, "Label", "Drop files here or Browse");
                __builder2.CloseComponent();
#nullable restore
#line 63 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
         foreach (var f in multiplelist)
        {

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(22, "div");
                __builder2.AddContent(23, 
#nullable restore
#line 65 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
                  f

#line default
#line hidden
#nullable disable
                );
                __builder2.CloseElement();
#nullable restore
#line 66 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
        }

#line default
#line hidden
#nullable disable
            }
            ));
            __builder.AddAttribute(24, "SourceContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder2) => {
                __builder2.OpenComponent<MatBlazor.Demo.BlazorFiddle.BlazorFiddle>(25);
                __builder2.AddAttribute(26, "Template", "MatBlazor");
                __builder2.AddAttribute(27, "Code", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.String>(
#nullable restore
#line 83 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
                                                  @"
        <MatFileUpload OnChange=""@MultipleFilesReady"" AllowMultiple=""true"" Label=""Drop files here or Browse""></MatFileUpload>

        @foreach (var f in multiplelist)
        {
            <div>@f</div>
        }

        @code
        { 
            List<string> multiplelist = new List<string>();

            void MultipleFilesReady(IMatFileUploadEntry[] files)
            {
                foreach (var file in files)
                {
                    multiplelist.Add($""Name: {file.Name} - Size: {file.Size}"");
                }
            } 
        }

    "

#line default
#line hidden
#nullable disable
                ));
                __builder2.CloseComponent();
            }
            ));
            __builder.CloseComponent();
            __builder.AddMarkupContent(28, "\n\n");
            __builder.AddMarkupContent(29, "<h5 class=\"mat-h5\">Read content of file</h5>\n\n");
            __builder.OpenComponent<MatBlazor.Demo.DemoContainer.DemoContainer>(30);
            __builder.AddAttribute(31, "Content", (Microsoft.AspNetCore.Components.RenderFragment)((__builder2) => {
                __builder2.OpenComponent<MatBlazor.MatFileUpload>(32);
                __builder2.AddAttribute(33, "OnChange", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<MatBlazor.IMatFileUploadEntry[]>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<MatBlazor.IMatFileUploadEntry[]>(this, 
#nullable restore
#line 112 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
                                  FilesReadyForContent

#line default
#line hidden
#nullable disable
                )));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(34, "\n        ");
                __builder2.OpenElement(35, "textarea");
                __builder2.AddAttribute(36, "style", "width: 100%; max-height: 300px; height: 300px;");
                __builder2.AddContent(37, 
#nullable restore
#line 113 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
                                                                          fileContent

#line default
#line hidden
#nullable disable
                );
                __builder2.CloseElement();
            }
            ));
            __builder.AddAttribute(38, "SourceContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder2) => {
                __builder2.OpenComponent<MatBlazor.Demo.BlazorFiddle.BlazorFiddle>(39);
                __builder2.AddAttribute(40, "Template", "MatBlazor");
                __builder2.AddAttribute(41, "Code", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.String>(
#nullable restore
#line 169 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
                                                  @"
        <MatFileUpload OnChange=""@FilesReadyForContent""></MatFileUpload>
        <textarea style=""width: 100%; max-height: 300px; height: 300px;"">@fileContent</textarea>

        @code
        { 
            string fileContent;

            async Task FilesReadyForContent(IMatFileUploadEntry[] files)
            {
                try
                {
                    var file = files.FirstOrDefault();
                    if (file == null)
                    {
                        return;
                    }

                    using (var stream = new MemoryStream())
                    {
                        var sw = Stopwatch.StartNew();
                        await file.WriteToStreamAsync(stream);
                        sw.Stop();
                        if (stream.Length > 1024 * 1024)
                        {
                            fileContent = """";
                            fileContent += $""Name:\t{file.Name}\r\n"";
                            fileContent += $""Type:\t{file.Type}\r\n"";
                            fileContent += $""LastModified:\t{file.LastModified}\r\n"";
                            fileContent += $""Size:\t{file.Size}\r\n"";
                            fileContent += $""Time:\t{sw.Elapsed}\r\n"";
                            fileContent += $""Speed:\t{(stream.Length / sw.Elapsed.TotalSeconds):N0}  b/s\r\n"";
                        }
                        else
                        {
                            stream.Seek(0, SeekOrigin.Begin);
                            using (var reader = new StreamReader(stream))
                            {
                                fileContent = await reader.ReadToEndAsync();
                            }
                        }
                    }
                }

                catch (Exception e)
                {
                    fileContent = $""Error:\r\n{e.Message}\r\n{e.StackTrace}"";
                }
                finally
                {
                    await InvokeAsync(StateHasChanged);
                }
            }
        }


    "

#line default
#line hidden
#nullable disable
                ));
                __builder2.CloseComponent();
            }
            ));
            __builder.CloseComponent();
        }
        #pragma warning restore 1998
#nullable restore
#line 17 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
         
            List<string> list = new List<string>();

            void FilesReady(IMatFileUploadEntry[] files)
            {
                foreach (var file in files)
                {
                    list.Add($"Name: {file.Name} - Size: {file.Size}");
                }
            }
        

#line default
#line hidden
#nullable disable
#nullable restore
#line 69 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
          
            List<string> multiplelist = new List<string>();

            void MultipleFilesReady(IMatFileUploadEntry[] files)
            {
                foreach (var file in files)
                {
                    multiplelist.Add($"Name: {file.Name} - Size: {file.Size}");
                }
            } 
        

#line default
#line hidden
#nullable disable
#nullable restore
#line 116 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoFileUpload.razor"
          
            string fileContent;

            async Task FilesReadyForContent(IMatFileUploadEntry[] files)
            {
                try
                {
                    var file = files.FirstOrDefault();
                    if (file == null)
                    {
                        return;
                    }

                    using (var stream = new MemoryStream())
                    {
                        var sw = Stopwatch.StartNew();
                        await file.WriteToStreamAsync(stream);
                        sw.Stop();
                        if (stream.Length > 1024 * 1024)
                        {
                            fileContent = "";
                            fileContent += $"Name:\t{file.Name}\r\n";
                            fileContent += $"Type:\t{file.Type}\r\n";
                            fileContent += $"LastModified:\t{file.LastModified}\r\n";
                            fileContent += $"Size:\t{file.Size}\r\n";
                            fileContent += $"Time:\t{sw.Elapsed}\r\n";
                            fileContent += $"Speed:\t{(stream.Length / sw.Elapsed.TotalSeconds):N0}  b/s\r\n";
                        }
                        else
                        {
                            stream.Seek(0, SeekOrigin.Begin);
                            using (var reader = new StreamReader(stream))
                            {
                                fileContent = await reader.ReadToEndAsync();
                            }
                        }
                    }
                }

                catch (Exception e)
                {
                    fileContent = $"Error:\r\n{e.Message}\r\n{e.StackTrace}";
                }
                finally
                {
                    await InvokeAsync(StateHasChanged);
                }
            }
        

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
