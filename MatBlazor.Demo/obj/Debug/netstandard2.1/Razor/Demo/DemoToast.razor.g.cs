#pragma checksum "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e23c5dbbe51b07fb687bba23488e8c6cbc52f768"
// <auto-generated/>
#pragma warning disable 1591
namespace MatBlazor.Demo.Demo
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.BlazorFiddle;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.Demo;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.DemoContainer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.Doc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.Frames;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\_Imports.razor"
using MatBlazor.Demo.Pages;

#line default
#line hidden
#nullable disable
    public partial class DemoToast : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.OpenComponent<MatBlazor.Demo.Doc.DocMatToast>(0);
            __builder.CloseComponent();
            __builder.AddMarkupContent(1, "\n");
            __builder.OpenComponent<MatBlazor.Demo.Doc.DocMatToastContainer>(2);
            __builder.CloseComponent();
            __builder.AddMarkupContent(3, "\n\n");
            __builder.AddMarkupContent(4, "<div class=\"mat-elevation-z5 mat-layout-grid mdc-theme--surface\"><div class=\"mat-layout-grid-inner-span-12\"><h2 class=\"mat-h2\">Installation</h2>\n\n        <h3>\n            Dependency injection configuration\n        </h3>\n        <h5>1. Startup.cs</h5>\n        <p>Add using MatBlazor; and then in the ConfiguresServices method include services.AddMatToaster...</p>\n        <pre class=\"code\"><code>\n                using MatBlazor;\n\n                services.AddMatToaster(config =>\n                {\n                    config.Position = MatToastPosition.BottomRight;\n                    config.PreventDuplicates = true;\n                    config.NewestOnTop = true;\n                    config.ShowCloseButton = true;\n                    config.MaximumOpacity = 95;\n                    config.VisibleStateDuration = 3000;\n                });\n            </code></pre>\n        <h3>MatToasterContainter component</h3>\n        <h5>2. App.razor</h5>\n        <p>\n            The toast container must be added to the App.razor component or to another component always loaded in the application like MainLayout.razor.\n            It is important to have exactly one instance of this component rendered in the application tree at any given time.\n        </p>\n        <pre class=\"code\"><code>\n                &lt;MatToastContainer /&gt;\n            </code></pre>\n        <h3>Usage</h3>\n        <h5>3. Code</h5>\n        <p>In a component:</p>\n        <pre class=\"code\"><code>@inject IMatToaster Toaster\n            </code></pre>\n        <p>In a class:</p>\n        <pre class=\"code\"><code>\n                [Inject]\n                protected IMatToaster Toaster { get; set; }\n            </code></pre>\n        <p>Then call one of the display methods:</p>\n        <pre class=\"code\"><code>\n                Toaster.Add(\"Toast body text\");\n                Toaster.Add(\"Toast body text\",\"Toast title\", \"code\");\n            </code></pre></div></div>\n\n");
            __builder.AddMarkupContent(5, "<h5 class=\"mat-h5\">Example</h5>\n");
            __builder.OpenComponent<MatBlazor.Demo.DemoContainer.DemoContainer>(6);
            __builder.AddAttribute(7, "Content", (Microsoft.AspNetCore.Components.RenderFragment)((__builder2) => {
                __builder2.OpenElement(8, "div");
                __builder2.AddAttribute(9, "class", "mat-layout-grid");
                __builder2.OpenElement(10, "div");
                __builder2.AddAttribute(11, "class", "mat-layout-grid-inner");
                __builder2.OpenElement(12, "div");
                __builder2.AddAttribute(13, "class", "mat-layout-grid-cell");
                __builder2.AddMarkupContent(14, "<h3>Data</h3>\n                    ");
                __builder2.OpenElement(15, "p");
                __Blazor.MatBlazor.Demo.Demo.DemoToast.TypeInference.CreateMatTextField_0(__builder2, 16, 17, "Title", 18, 
#nullable restore
#line 76 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                 _title

#line default
#line hidden
#nullable disable
                , 19, Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => _title = __value, _title)), 20, () => _title);
                __builder2.CloseElement();
                __builder2.AddMarkupContent(21, "\n                    ");
                __builder2.OpenElement(22, "p");
                __Blazor.MatBlazor.Demo.Demo.DemoToast.TypeInference.CreateMatTextField_1(__builder2, 23, 24, "Message", 25, 
#nullable restore
#line 79 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                   _message

#line default
#line hidden
#nullable disable
                , 26, Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => _message = __value, _message)), 27, () => _message);
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(28, "\n                ");
                __builder2.OpenElement(29, "div");
                __builder2.AddAttribute(30, "class", "mat-layout-grid-cell");
                __builder2.AddMarkupContent(31, "<h3>Actions</h3>\n                    ");
                __builder2.OpenComponent<MatBlazor.MatButton>(32);
                __builder2.AddAttribute(33, "Raised", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 84 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                       true

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(34, "Class", "mdc-toast-danger");
                __builder2.AddAttribute(35, "OnClick", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 84 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                                 () => Show(MatToastType.Danger)

#line default
#line hidden
#nullable disable
                )));
                __builder2.AddAttribute(36, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddContent(37, "Danger");
                }
                ));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(38, "\n                    ");
                __builder2.OpenComponent<MatBlazor.MatButton>(39);
                __builder2.AddAttribute(40, "Raised", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 85 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                       true

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(41, "Class", "mdc-toast-dark");
                __builder2.AddAttribute(42, "OnClick", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 85 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                               () => Show(MatToastType.Dark, "accessible")

#line default
#line hidden
#nullable disable
                )));
                __builder2.AddAttribute(43, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddContent(44, "Dark");
                }
                ));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(45, "\n                    ");
                __builder2.OpenComponent<MatBlazor.MatButton>(46);
                __builder2.AddAttribute(47, "Raised", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 86 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                       true

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(48, "Class", "mdc-toast-info");
                __builder2.AddAttribute(49, "OnClick", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 86 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                               () => Show(MatToastType.Info)

#line default
#line hidden
#nullable disable
                )));
                __builder2.AddAttribute(50, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddContent(51, "Info");
                }
                ));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(52, "\n                    ");
                __builder2.OpenComponent<MatBlazor.MatButton>(53);
                __builder2.AddAttribute(54, "Raised", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 87 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                       true

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(55, "Class", "mdc-toast-light");
                __builder2.AddAttribute(56, "OnClick", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 87 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                                () => Show(MatToastType.Light)

#line default
#line hidden
#nullable disable
                )));
                __builder2.AddAttribute(57, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddContent(58, "Light");
                }
                ));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(59, "\n                    ");
                __builder2.OpenComponent<MatBlazor.MatButton>(60);
                __builder2.AddAttribute(61, "Raised", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 88 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                       true

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(62, "Class", "mdc-toast-link");
                __builder2.AddAttribute(63, "OnClick", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 88 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                               () => Show(MatToastType.Link, "link")

#line default
#line hidden
#nullable disable
                )));
                __builder2.AddAttribute(64, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddContent(65, "Link");
                }
                ));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(66, "\n                    ");
                __builder2.OpenComponent<MatBlazor.MatButton>(67);
                __builder2.AddAttribute(68, "Raised", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 89 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                       true

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(69, "Class", "mdc-toast-primary");
                __builder2.AddAttribute(70, "OnClick", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 89 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                                  () => Show(MatToastType.Primary)

#line default
#line hidden
#nullable disable
                )));
                __builder2.AddAttribute(71, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddContent(72, "Primary");
                }
                ));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(73, "\n                    ");
                __builder2.OpenComponent<MatBlazor.MatButton>(74);
                __builder2.AddAttribute(75, "Raised", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 90 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                       true

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(76, "Class", "mdc-toast-secondary");
                __builder2.AddAttribute(77, "OnClick", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 90 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                                    () => Show(MatToastType.Secondary)

#line default
#line hidden
#nullable disable
                )));
                __builder2.AddAttribute(78, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddContent(79, "Secondary");
                }
                ));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(80, "\n                    ");
                __builder2.OpenComponent<MatBlazor.MatButton>(81);
                __builder2.AddAttribute(82, "Raised", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 91 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                       true

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(83, "Class", "mdc-toast-success");
                __builder2.AddAttribute(84, "OnClick", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 91 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                                  () => Show(MatToastType.Success)

#line default
#line hidden
#nullable disable
                )));
                __builder2.AddAttribute(85, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddContent(86, "Success");
                }
                ));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(87, "\n                    ");
                __builder2.OpenComponent<MatBlazor.MatButton>(88);
                __builder2.AddAttribute(89, "Raised", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 92 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                       true

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(90, "Class", "mdc-toast-warning");
                __builder2.AddAttribute(91, "OnClick", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 92 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                                  () => Show(MatToastType.Warning)

#line default
#line hidden
#nullable disable
                )));
                __builder2.AddAttribute(92, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddContent(93, "Warning");
                }
                ));
                __builder2.CloseComponent();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(94, "\n                ");
                __builder2.OpenElement(95, "div");
                __builder2.AddAttribute(96, "class", "mat-layout-grid-cell");
                __builder2.AddMarkupContent(97, "<h3>Toast transitions</h3>\n                    ");
                __builder2.OpenElement(98, "p");
                __Blazor.MatBlazor.Demo.Demo.DemoToast.TypeInference.CreateMatTextField_2(__builder2, 99, 100, "Show duration", 101, "number", 102, 
#nullable restore
#line 98 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                                       _showTransitionDuration

#line default
#line hidden
#nullable disable
                , 103, Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => _showTransitionDuration = __value, _showTransitionDuration)), 104, () => _showTransitionDuration);
                __builder2.CloseElement();
                __builder2.AddMarkupContent(105, "\n                    ");
                __builder2.OpenElement(106, "p");
                __Blazor.MatBlazor.Demo.Demo.DemoToast.TypeInference.CreateMatTextField_3(__builder2, 107, 108, "Visible duration", 109, "number", 110, 
#nullable restore
#line 101 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                                          _visibleStateDuration

#line default
#line hidden
#nullable disable
                , 111, Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => _visibleStateDuration = __value, _visibleStateDuration)), 112, () => _visibleStateDuration);
                __builder2.CloseElement();
                __builder2.AddMarkupContent(113, "\n                    ");
                __builder2.OpenElement(114, "p");
                __Blazor.MatBlazor.Demo.Demo.DemoToast.TypeInference.CreateMatTextField_4(__builder2, 115, 116, "Hide duration", 117, "number", 118, 
#nullable restore
#line 104 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                                       _hideTransitionDuration

#line default
#line hidden
#nullable disable
                , 119, Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => _hideTransitionDuration = __value, _hideTransitionDuration)), 120, () => _hideTransitionDuration);
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(121, "\n                ");
                __builder2.OpenElement(122, "div");
                __builder2.AddAttribute(123, "class", "mat-layout-grid-cell");
                __builder2.AddMarkupContent(124, "<h3>General options</h3>\n                    ");
                __builder2.OpenElement(125, "p");
                __Blazor.MatBlazor.Demo.Demo.DemoToast.TypeInference.CreateMatSelect_5(__builder2, 126, 127, "Position", 128, 
#nullable restore
#line 110 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                  _toastPosition

#line default
#line hidden
#nullable disable
                , 129, Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => _toastPosition = __value, _toastPosition)), 130, () => _toastPosition, 131, (__builder3) => {
#nullable restore
#line 111 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                             foreach (var enumName in Enum.GetNames(typeof(MatToastPosition)))
                            {

#line default
#line hidden
#nullable disable
                    __Blazor.MatBlazor.Demo.Demo.DemoToast.TypeInference.CreateMatOption_6(__builder3, 132, 133, 
#nullable restore
#line 113 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                   enumName

#line default
#line hidden
#nullable disable
                    , 134, (__builder4) => {
                        __builder4.AddContent(135, 
#nullable restore
#line 113 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                              enumName

#line default
#line hidden
#nullable disable
                        );
                    }
                    );
#nullable restore
#line 114 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                            }

#line default
#line hidden
#nullable disable
                }
                );
                __builder2.CloseElement();
                __builder2.AddMarkupContent(136, "\n                    ");
                __builder2.OpenElement(137, "p");
                __Blazor.MatBlazor.Demo.Demo.DemoToast.TypeInference.CreateMatTextField_7(__builder2, 138, 139, "Max visible toasts", 140, "number", 141, 
#nullable restore
#line 119 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                                            _maxDisplayedToasts

#line default
#line hidden
#nullable disable
                , 142, Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => _maxDisplayedToasts = __value, _maxDisplayedToasts)), 143, () => _maxDisplayedToasts);
                __builder2.CloseElement();
                __builder2.AddMarkupContent(144, "\n                    ");
                __builder2.OpenElement(145, "p");
                __Blazor.MatBlazor.Demo.Demo.DemoToast.TypeInference.CreateMatCheckbox_8(__builder2, 146, 147, "Newest on Top", 148, 
#nullable restore
#line 122 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                         Toaster.Configuration.NewestOnTop

#line default
#line hidden
#nullable disable
                , 149, Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => Toaster.Configuration.NewestOnTop = __value, Toaster.Configuration.NewestOnTop)), 150, () => Toaster.Configuration.NewestOnTop);
                __builder2.CloseElement();
                __builder2.AddMarkupContent(151, "\n                    ");
                __builder2.OpenElement(152, "p");
                __Blazor.MatBlazor.Demo.Demo.DemoToast.TypeInference.CreateMatCheckbox_9(__builder2, 153, 154, "Prevent duplicates", 155, 
#nullable restore
#line 125 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                              Toaster.Configuration.PreventDuplicates

#line default
#line hidden
#nullable disable
                , 156, Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => Toaster.Configuration.PreventDuplicates = __value, Toaster.Configuration.PreventDuplicates)), 157, () => Toaster.Configuration.PreventDuplicates);
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(158, "\n                ");
                __builder2.OpenElement(159, "div");
                __builder2.AddAttribute(160, "class", "mat-layout-grid-cell");
                __builder2.AddMarkupContent(161, "<h3>Toast options</h3>\n                    ");
                __builder2.OpenElement(162, "p");
                __Blazor.MatBlazor.Demo.Demo.DemoToast.TypeInference.CreateMatTextField_10(__builder2, 163, 164, "Max opacity (%)", 165, "number", 166, 
#nullable restore
#line 131 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                                         _maximumOpacity

#line default
#line hidden
#nullable disable
                , 167, Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => _maximumOpacity = __value, _maximumOpacity)), 168, () => _maximumOpacity);
                __builder2.CloseElement();
                __builder2.AddMarkupContent(169, "\n                    ");
                __builder2.OpenElement(170, "p");
                __Blazor.MatBlazor.Demo.Demo.DemoToast.TypeInference.CreateMatCheckbox_11(__builder2, 171, 172, "Require interaction", 173, 
#nullable restore
#line 134 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                               _requireInteraction

#line default
#line hidden
#nullable disable
                , 174, Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => _requireInteraction = __value, _requireInteraction)), 175, () => _requireInteraction);
                __builder2.CloseElement();
                __builder2.AddMarkupContent(176, "\n                    ");
                __builder2.OpenElement(177, "p");
                __Blazor.MatBlazor.Demo.Demo.DemoToast.TypeInference.CreateMatCheckbox_12(__builder2, 178, 179, "Progress bar", 180, 
#nullable restore
#line 137 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                        _showProgressBar

#line default
#line hidden
#nullable disable
                , 181, Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => _showProgressBar = __value, _showProgressBar)), 182, () => _showProgressBar);
                __builder2.CloseElement();
                __builder2.AddMarkupContent(183, "\n                    ");
                __builder2.OpenElement(184, "p");
                __Blazor.MatBlazor.Demo.Demo.DemoToast.TypeInference.CreateMatCheckbox_13(__builder2, 185, 186, "Close Button", 187, 
#nullable restore
#line 140 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                        _showCloseButton

#line default
#line hidden
#nullable disable
                , 188, Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => _showCloseButton = __value, _showCloseButton)), 189, () => _showCloseButton);
                __builder2.CloseElement();
                __builder2.AddMarkupContent(190, "\n                    ");
                __builder2.OpenElement(191, "p");
                __Blazor.MatBlazor.Demo.Demo.DemoToast.TypeInference.CreateMatCheckbox_14(__builder2, 192, 193, "Action on click (message in console)", 194, 
#nullable restore
#line 143 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                                                                _actionOnClick

#line default
#line hidden
#nullable disable
                , 195, Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => _actionOnClick = __value, _actionOnClick)), 196, () => _actionOnClick);
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
            }
            ));
            __builder.AddAttribute(197, "SourceContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder2) => {
                __builder2.OpenComponent<MatBlazor.Demo.BlazorFiddle.BlazorFiddle>(198);
                __builder2.AddAttribute(199, "Template", "MatBlazor");
                __builder2.AddAttribute(200, "Code", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.String>(
#nullable restore
#line 220 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
                                                  @"
        @inject IMatToaster Toaster

        <div class=""mat-layout-grid"">
            <div class=""mat-layout-grid-inner"">
                <div class=""mat-layout-grid-cell"">
                    <h3>Data</h3>
                    <p>
                        <MatTextField Label=""Title"" @bind-Value=""_title""></MatTextField>
                    </p>
                    <p>
                        <MatTextField Label=""Message"" @bind-Value=""_message""></MatTextField>
                    </p>
                </div>
                <div class=""mat-layout-grid-cell"">
                    <h3>Actions</h3>
                    <MatButton Raised=""true"" Class=""mdc-toast-danger"" OnClick=""@(() => Show(MatToastType.Danger))"">Danger</MatButton>
                    <MatButton Raised=""true"" Class=""mdc-toast-dark"" OnClick=""@(() => Show(MatToastType.Dark, ""accessible""))"">Dark</MatButton>
                    <MatButton Raised=""true"" Class=""mdc-toast-info"" OnClick=""@(() => Show(MatToastType.Info))"">Info</MatButton>
                    <MatButton Raised=""true"" Class=""mdc-toast-light"" OnClick=""@(() => Show(MatToastType.Light))"">Light</MatButton>
                    <MatButton Raised=""true"" Class=""mdc-toast-link"" OnClick=""@(() => Show(MatToastType.Link, ""link""))"">Link</MatButton>
                    <MatButton Raised=""true"" Class=""mdc-toast-primary"" OnClick=""@(() => Show(MatToastType.Primary))"">Primary</MatButton>
                    <MatButton Raised=""true"" Class=""mdc-toast-secondary"" OnClick=""@(() => Show(MatToastType.Secondary))"">Secondary</MatButton>
                    <MatButton Raised=""true"" Class=""mdc-toast-success"" OnClick=""@(() => Show(MatToastType.Success))"">Success</MatButton>
                    <MatButton Raised=""true"" Class=""mdc-toast-warning"" OnClick=""@(() => Show(MatToastType.Warning))"">Warning</MatButton>

                </div>
                <div class=""mat-layout-grid-cell"">
                    <h3>Toast transitions</h3>
                    <p>
                        <MatTextField Label=""Show duration"" Type=""number"" @bind-Value=""_showTransitionDuration""></MatTextField>
                    </p>
                    <p>
                        <MatTextField Label=""Visible duration"" Type=""number"" @bind-Value=""_visibleStateDuration""></MatTextField>
                    </p>
                    <p>
                        <MatTextField Label=""Hide duration"" Type=""number"" @bind-Value=""_hideTransitionDuration""></MatTextField>
                    </p>
                </div>
                <div class=""mat-layout-grid-cell"">
                    <h3>General options</h3>
                    <p>
                        <MatSelect Label=""Position"" @bind-Value=""@_toastPosition"">
                            @foreach (var enumName in Enum.GetNames(typeof(MatToastPosition)))
                            {
                                <MatOption Value=""@enumName"">@enumName</MatOption>
                            }

                        </MatSelect>
                    </p>
                    <p>
                        <MatTextField Label=""Max visible toasts"" Type=""number"" @bind-Value=""_maxDisplayedToasts""></MatTextField>
                    </p>
                    <p>
                        <MatCheckbox Label=""Newest on Top"" @bind-Value=""@Toaster.Configuration.NewestOnTop""></MatCheckbox>
                    </p>
                    <p>
                        <MatCheckbox Label=""Prevent duplicates"" @bind-Value=""@Toaster.Configuration.PreventDuplicates""></MatCheckbox>
                    </p>
                </div>
                <div class=""mat-layout-grid-cell"">
                    <h3>Toast options</h3>
                    <p>
                        <MatTextField Label=""Max opacity (%)"" Type=""number"" @bind-Value=""_maximumOpacity""></MatTextField>
                    </p>
                    <p>
                        <MatCheckbox Label=""Require interaction"" @bind-Value=""@_requireInteraction""></MatCheckbox>
                    </p>
                    <p>
                        <MatCheckbox Label=""Progress bar"" @bind-Value=""@_showProgressBar""></MatCheckbox>
                    </p>
                    <p>
                        <MatCheckbox Label=""Close Button"" @bind-Value=""@_showCloseButton""></MatCheckbox>
                    </p>
                    <p>
                        <MatCheckbox Label=""Action on click (message in console)"" @bind-Value=""@_actionOnClick""></MatCheckbox>
                    </p>
                </div>
            </div>
        </div>


        @code {
            private string _title = ""Test Title"";
            private string _message = ""Test Message"";
            private bool _showProgressBar;
            private bool _showCloseButton;
            private bool _actionOnClick;
            private string _maximumOpacity;

            private string _showTransitionDuration;
            private string _visibleStateDuration;
            private string _hideTransitionDuration;

            private bool _requireInteraction;

            public string _maxDisplayedToasts
            {
                get { return Toaster.Configuration.MaxDisplayedToasts.ToString(); }
                set { Toaster.Configuration.MaxDisplayedToasts = Convert.ToInt32(value); }
            }


            string _toastPosition
            {
                get { return Toaster.Configuration.Position.ToString(); }
                set { Toaster.Configuration.Position = (MatToastPosition)Enum.Parse(typeof(MatToastPosition), value); }
            }

            protected override void OnInitialized()
            {
                _showProgressBar = Toaster.Configuration.ShowProgressBar;
                _showCloseButton = Toaster.Configuration.ShowCloseButton;
                _maximumOpacity = Toaster.Configuration.MaximumOpacity.ToString();

                _showTransitionDuration = Toaster.Configuration.ShowTransitionDuration.ToString();
                _visibleStateDuration = Toaster.Configuration.VisibleStateDuration.ToString();
                _hideTransitionDuration = Toaster.Configuration.HideTransitionDuration.ToString();

                _requireInteraction = Toaster.Configuration.RequireInteraction;
            }

            public void Show(MatToastType type, string icon = """")
            {
                Toaster.Add(_message, type, _title, icon, config =>
                {
                    config.ShowCloseButton = _showCloseButton;
                    config.ShowProgressBar = _showProgressBar;
                    config.MaximumOpacity = Convert.ToInt32(_maximumOpacity);

                    config.ShowTransitionDuration = Convert.ToInt32(_showTransitionDuration);
                    config.VisibleStateDuration = Convert.ToInt32(_visibleStateDuration);
                    config.HideTransitionDuration = Convert.ToInt32(_hideTransitionDuration);

                    config.RequireInteraction = _requireInteraction;

                    if (_actionOnClick)
                    {
                        config.Onclick = toast =>
                        {
                            Console.WriteLine($""Title: \""{toast.Title}\""; message: \""{toast.Message}\""; Type: {toast.Options.Type}"");
                            return Task.CompletedTask;
                        };
                    }
                });
            }

        }


    "

#line default
#line hidden
#nullable disable
                ));
                __builder2.CloseComponent();
            }
            ));
            __builder.CloseComponent();
        }
        #pragma warning restore 1998
#nullable restore
#line 150 "E:\c# project\Blazor\MatBlazor\MatBlazor-master\src\MatBlazor.Demo\Demo\DemoToast.razor"
               
            private string _title = "Test Title";
            private string _message = "Test Message";
            private bool _showProgressBar;
            private bool _showCloseButton;
            private bool _actionOnClick;
            private string _maximumOpacity;

            private string _showTransitionDuration;
            private string _visibleStateDuration;
            private string _hideTransitionDuration;

            private bool _requireInteraction;

            public string _maxDisplayedToasts
            {
                get { return Toaster.Configuration.MaxDisplayedToasts.ToString(); }
                set { Toaster.Configuration.MaxDisplayedToasts = Convert.ToInt32(value); }
            }


            string _toastPosition
            {
                get { return Toaster.Configuration.Position.ToString(); }
                set { Toaster.Configuration.Position = (MatToastPosition)Enum.Parse(typeof(MatToastPosition), value); }
            }

            protected override void OnInitialized()
            {
                _showProgressBar = Toaster.Configuration.ShowProgressBar;
                _showCloseButton = Toaster.Configuration.ShowCloseButton;
                _maximumOpacity = Toaster.Configuration.MaximumOpacity.ToString();

                _showTransitionDuration = Toaster.Configuration.ShowTransitionDuration.ToString();
                _visibleStateDuration = Toaster.Configuration.VisibleStateDuration.ToString();
                _hideTransitionDuration = Toaster.Configuration.HideTransitionDuration.ToString();

                _requireInteraction = Toaster.Configuration.RequireInteraction;
            }

            public void Show(MatToastType type, string icon = "")
            {
                Toaster.Add(_message, type, _title, icon, config =>
                {
                    config.ShowCloseButton = _showCloseButton;
                    config.ShowProgressBar = _showProgressBar;
                    config.MaximumOpacity = Convert.ToInt32(_maximumOpacity);

                    config.ShowTransitionDuration = Convert.ToInt32(_showTransitionDuration);
                    config.VisibleStateDuration = Convert.ToInt32(_visibleStateDuration);
                    config.HideTransitionDuration = Convert.ToInt32(_hideTransitionDuration);

                    config.RequireInteraction = _requireInteraction;

                    if (_actionOnClick)
                    {
                        config.Onclick = toast =>
                        {
                            Console.WriteLine($"Title: \"{toast.Title}\"; message: \"{toast.Message}\"; Type: {toast.Options.Type}");
                            return Task.CompletedTask;
                        };
                    }
                });
            }

        

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMatToaster Toaster { get; set; }
    }
}
namespace __Blazor.MatBlazor.Demo.Demo.DemoToast
{
    #line hidden
    internal static class TypeInference
    {
        public static void CreateMatTextField_0<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.String __arg0, int __seq1, TValue __arg1, int __seq2, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg2, int __seq3, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg3)
        {
        __builder.OpenComponent<global::MatBlazor.MatTextField<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Label", __arg0);
        __builder.AddAttribute(__seq1, "Value", __arg1);
        __builder.AddAttribute(__seq2, "ValueChanged", __arg2);
        __builder.AddAttribute(__seq3, "ValueExpression", __arg3);
        __builder.CloseComponent();
        }
        public static void CreateMatTextField_1<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.String __arg0, int __seq1, TValue __arg1, int __seq2, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg2, int __seq3, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg3)
        {
        __builder.OpenComponent<global::MatBlazor.MatTextField<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Label", __arg0);
        __builder.AddAttribute(__seq1, "Value", __arg1);
        __builder.AddAttribute(__seq2, "ValueChanged", __arg2);
        __builder.AddAttribute(__seq3, "ValueExpression", __arg3);
        __builder.CloseComponent();
        }
        public static void CreateMatTextField_2<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.String __arg0, int __seq1, global::System.String __arg1, int __seq2, TValue __arg2, int __seq3, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg3, int __seq4, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg4)
        {
        __builder.OpenComponent<global::MatBlazor.MatTextField<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Label", __arg0);
        __builder.AddAttribute(__seq1, "Type", __arg1);
        __builder.AddAttribute(__seq2, "Value", __arg2);
        __builder.AddAttribute(__seq3, "ValueChanged", __arg3);
        __builder.AddAttribute(__seq4, "ValueExpression", __arg4);
        __builder.CloseComponent();
        }
        public static void CreateMatTextField_3<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.String __arg0, int __seq1, global::System.String __arg1, int __seq2, TValue __arg2, int __seq3, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg3, int __seq4, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg4)
        {
        __builder.OpenComponent<global::MatBlazor.MatTextField<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Label", __arg0);
        __builder.AddAttribute(__seq1, "Type", __arg1);
        __builder.AddAttribute(__seq2, "Value", __arg2);
        __builder.AddAttribute(__seq3, "ValueChanged", __arg3);
        __builder.AddAttribute(__seq4, "ValueExpression", __arg4);
        __builder.CloseComponent();
        }
        public static void CreateMatTextField_4<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.String __arg0, int __seq1, global::System.String __arg1, int __seq2, TValue __arg2, int __seq3, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg3, int __seq4, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg4)
        {
        __builder.OpenComponent<global::MatBlazor.MatTextField<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Label", __arg0);
        __builder.AddAttribute(__seq1, "Type", __arg1);
        __builder.AddAttribute(__seq2, "Value", __arg2);
        __builder.AddAttribute(__seq3, "ValueChanged", __arg3);
        __builder.AddAttribute(__seq4, "ValueExpression", __arg4);
        __builder.CloseComponent();
        }
        public static void CreateMatSelect_5<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.String __arg0, int __seq1, TValue __arg1, int __seq2, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg2, int __seq3, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg3, int __seq4, global::Microsoft.AspNetCore.Components.RenderFragment __arg4)
        {
        __builder.OpenComponent<global::MatBlazor.MatSelect<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Label", __arg0);
        __builder.AddAttribute(__seq1, "Value", __arg1);
        __builder.AddAttribute(__seq2, "ValueChanged", __arg2);
        __builder.AddAttribute(__seq3, "ValueExpression", __arg3);
        __builder.AddAttribute(__seq4, "ChildContent", __arg4);
        __builder.CloseComponent();
        }
        public static void CreateMatOption_6<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, global::Microsoft.AspNetCore.Components.RenderFragment __arg1)
        {
        __builder.OpenComponent<global::MatBlazor.MatOption<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Value", __arg0);
        __builder.AddAttribute(__seq1, "ChildContent", __arg1);
        __builder.CloseComponent();
        }
        public static void CreateMatTextField_7<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.String __arg0, int __seq1, global::System.String __arg1, int __seq2, TValue __arg2, int __seq3, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg3, int __seq4, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg4)
        {
        __builder.OpenComponent<global::MatBlazor.MatTextField<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Label", __arg0);
        __builder.AddAttribute(__seq1, "Type", __arg1);
        __builder.AddAttribute(__seq2, "Value", __arg2);
        __builder.AddAttribute(__seq3, "ValueChanged", __arg3);
        __builder.AddAttribute(__seq4, "ValueExpression", __arg4);
        __builder.CloseComponent();
        }
        public static void CreateMatCheckbox_8<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.String __arg0, int __seq1, TValue __arg1, int __seq2, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg2, int __seq3, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg3)
        {
        __builder.OpenComponent<global::MatBlazor.MatCheckbox<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Label", __arg0);
        __builder.AddAttribute(__seq1, "Value", __arg1);
        __builder.AddAttribute(__seq2, "ValueChanged", __arg2);
        __builder.AddAttribute(__seq3, "ValueExpression", __arg3);
        __builder.CloseComponent();
        }
        public static void CreateMatCheckbox_9<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.String __arg0, int __seq1, TValue __arg1, int __seq2, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg2, int __seq3, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg3)
        {
        __builder.OpenComponent<global::MatBlazor.MatCheckbox<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Label", __arg0);
        __builder.AddAttribute(__seq1, "Value", __arg1);
        __builder.AddAttribute(__seq2, "ValueChanged", __arg2);
        __builder.AddAttribute(__seq3, "ValueExpression", __arg3);
        __builder.CloseComponent();
        }
        public static void CreateMatTextField_10<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.String __arg0, int __seq1, global::System.String __arg1, int __seq2, TValue __arg2, int __seq3, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg3, int __seq4, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg4)
        {
        __builder.OpenComponent<global::MatBlazor.MatTextField<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Label", __arg0);
        __builder.AddAttribute(__seq1, "Type", __arg1);
        __builder.AddAttribute(__seq2, "Value", __arg2);
        __builder.AddAttribute(__seq3, "ValueChanged", __arg3);
        __builder.AddAttribute(__seq4, "ValueExpression", __arg4);
        __builder.CloseComponent();
        }
        public static void CreateMatCheckbox_11<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.String __arg0, int __seq1, TValue __arg1, int __seq2, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg2, int __seq3, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg3)
        {
        __builder.OpenComponent<global::MatBlazor.MatCheckbox<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Label", __arg0);
        __builder.AddAttribute(__seq1, "Value", __arg1);
        __builder.AddAttribute(__seq2, "ValueChanged", __arg2);
        __builder.AddAttribute(__seq3, "ValueExpression", __arg3);
        __builder.CloseComponent();
        }
        public static void CreateMatCheckbox_12<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.String __arg0, int __seq1, TValue __arg1, int __seq2, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg2, int __seq3, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg3)
        {
        __builder.OpenComponent<global::MatBlazor.MatCheckbox<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Label", __arg0);
        __builder.AddAttribute(__seq1, "Value", __arg1);
        __builder.AddAttribute(__seq2, "ValueChanged", __arg2);
        __builder.AddAttribute(__seq3, "ValueExpression", __arg3);
        __builder.CloseComponent();
        }
        public static void CreateMatCheckbox_13<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.String __arg0, int __seq1, TValue __arg1, int __seq2, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg2, int __seq3, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg3)
        {
        __builder.OpenComponent<global::MatBlazor.MatCheckbox<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Label", __arg0);
        __builder.AddAttribute(__seq1, "Value", __arg1);
        __builder.AddAttribute(__seq2, "ValueChanged", __arg2);
        __builder.AddAttribute(__seq3, "ValueExpression", __arg3);
        __builder.CloseComponent();
        }
        public static void CreateMatCheckbox_14<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.String __arg0, int __seq1, TValue __arg1, int __seq2, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg2, int __seq3, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg3)
        {
        __builder.OpenComponent<global::MatBlazor.MatCheckbox<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Label", __arg0);
        __builder.AddAttribute(__seq1, "Value", __arg1);
        __builder.AddAttribute(__seq2, "ValueChanged", __arg2);
        __builder.AddAttribute(__seq3, "ValueExpression", __arg3);
        __builder.CloseComponent();
        }
    }
}
#pragma warning restore 1591
